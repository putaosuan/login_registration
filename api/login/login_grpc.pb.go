// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.7.1
// source: api/login/login.proto

package login

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginClient is the client API for Login service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginClient interface {
	CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...grpc.CallOption) (*CreateLoginReply, error)
	UpdateLogin(ctx context.Context, in *UpdateLoginRequest, opts ...grpc.CallOption) (*UpdateLoginReply, error)
	DeleteLogin(ctx context.Context, in *DeleteLoginRequest, opts ...grpc.CallOption) (*DeleteLoginReply, error)
	GetLogin(ctx context.Context, in *GetLoginRequest, opts ...grpc.CallOption) (*GetLoginReply, error)
	ListLogin(ctx context.Context, in *ListLoginRequest, opts ...grpc.CallOption) (*ListLoginReply, error)
}

type loginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginClient(cc grpc.ClientConnInterface) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...grpc.CallOption) (*CreateLoginReply, error) {
	out := new(CreateLoginReply)
	err := c.cc.Invoke(ctx, "/api.login.Login/CreateLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) UpdateLogin(ctx context.Context, in *UpdateLoginRequest, opts ...grpc.CallOption) (*UpdateLoginReply, error) {
	out := new(UpdateLoginReply)
	err := c.cc.Invoke(ctx, "/api.login.Login/UpdateLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) DeleteLogin(ctx context.Context, in *DeleteLoginRequest, opts ...grpc.CallOption) (*DeleteLoginReply, error) {
	out := new(DeleteLoginReply)
	err := c.cc.Invoke(ctx, "/api.login.Login/DeleteLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) GetLogin(ctx context.Context, in *GetLoginRequest, opts ...grpc.CallOption) (*GetLoginReply, error) {
	out := new(GetLoginReply)
	err := c.cc.Invoke(ctx, "/api.login.Login/GetLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) ListLogin(ctx context.Context, in *ListLoginRequest, opts ...grpc.CallOption) (*ListLoginReply, error) {
	out := new(ListLoginReply)
	err := c.cc.Invoke(ctx, "/api.login.Login/ListLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServer is the server API for Login service.
// All implementations should embed UnimplementedLoginServer
// for forward compatibility
type LoginServer interface {
	CreateLogin(context.Context, *CreateLoginRequest) (*CreateLoginReply, error)
	UpdateLogin(context.Context, *UpdateLoginRequest) (*UpdateLoginReply, error)
	DeleteLogin(context.Context, *DeleteLoginRequest) (*DeleteLoginReply, error)
	GetLogin(context.Context, *GetLoginRequest) (*GetLoginReply, error)
	ListLogin(context.Context, *ListLoginRequest) (*ListLoginReply, error)
}

// UnimplementedLoginServer should be embedded to have forward compatible implementations.
type UnimplementedLoginServer struct {
}

func (UnimplementedLoginServer) CreateLogin(context.Context, *CreateLoginRequest) (*CreateLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogin not implemented")
}
func (UnimplementedLoginServer) UpdateLogin(context.Context, *UpdateLoginRequest) (*UpdateLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogin not implemented")
}
func (UnimplementedLoginServer) DeleteLogin(context.Context, *DeleteLoginRequest) (*DeleteLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogin not implemented")
}
func (UnimplementedLoginServer) GetLogin(context.Context, *GetLoginRequest) (*GetLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogin not implemented")
}
func (UnimplementedLoginServer) ListLogin(context.Context, *ListLoginRequest) (*ListLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogin not implemented")
}

// UnsafeLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServer will
// result in compilation errors.
type UnsafeLoginServer interface {
	mustEmbedUnimplementedLoginServer()
}

func RegisterLoginGrpcServer(s grpc.ServiceRegistrar, srv LoginServer) {
	s.RegisterService(&Login_ServiceDesc, srv)
}

func _Login_CreateLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).CreateLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.Login/CreateLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).CreateLogin(ctx, req.(*CreateLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_UpdateLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).UpdateLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.Login/UpdateLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).UpdateLogin(ctx, req.(*UpdateLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_DeleteLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).DeleteLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.Login/DeleteLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).DeleteLogin(ctx, req.(*DeleteLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_GetLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).GetLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.Login/GetLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).GetLogin(ctx, req.(*GetLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_ListLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).ListLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.Login/ListLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).ListLogin(ctx, req.(*ListLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Login_ServiceDesc is the grpc.ServiceDesc for Login service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Login_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.login.Login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogin",
			Handler:    _Login_CreateLogin_Handler,
		},
		{
			MethodName: "UpdateLogin",
			Handler:    _Login_UpdateLogin_Handler,
		},
		{
			MethodName: "DeleteLogin",
			Handler:    _Login_DeleteLogin_Handler,
		},
		{
			MethodName: "GetLogin",
			Handler:    _Login_GetLogin_Handler,
		},
		{
			MethodName: "ListLogin",
			Handler:    _Login_ListLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/login/login.proto",
}
